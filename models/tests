import unittest
from datetime import datetime
from models.base_model import BaseModel  # Adjust the import based on your project structure
from models.engine.file_storage import storage  # Assuming this is where your storage is defined

class TestBaseModel(unittest.TestCase):
    def setUp(self):
        """Set up a new BaseModel instance for testing."""
        self.model = BaseModel()

    def test_initialization(self):
        """Test that the BaseModel initializes with a unique id and timestamps."""
        self.assertIsInstance(self.model.id, str)
        self.assertEqual(len(self.model.id), 36)  # UUID is a 36 character string
        self.assertIsInstance(self.model.created_at, datetime)
        self.assertIsInstance(self.model.updated_at, datetime)
        self.assertEqual(self.model.created_at, self.model.updated_at)

    def test_save_updates_updated_at(self):
        """Test that the save method updates the updated_at timestamp."""
        old_updated_at = self.model.updated_at
        self.model.save()
        self.assertNotEqual(old_updated_at, self.model.updated_at)

    def test_to_dict(self):
        """Test that to_dict method returns the correct dictionary representation."""
        model_dict = self.model.to_dict()
        self.assertEqual(model_dict["__class__"], "BaseModel")
        self.assertEqual(model_dict["id"], self.model.id)
        self.assertEqual(model_dict["created_at"], self.model.created_at.isoformat())
        self.assertEqual(model_dict["updated_at"], self.model.updated_at.isoformat())

    def test_initialization_with_kwargs(self):
        """Test that BaseModel can be initialized with keyword arguments."""
        created_at = datetime.now().isoformat()
        updated_at = datetime.now().isoformat()
        model_data = {
            "id": str(uuid.uuid4()),
            "created_at": created_at,
            "updated_at": updated_at
        }
        model = BaseModel(**model_data)
        self.assertEqual(model.id, model_data["id"])
        self.assertEqual(model.created_at, datetime.fromisoformat(created_at))
        self.assertEqual(model.updated_at, datetime.fromisoformat(updated_at))

    def tearDown(self):
        """Clean up after each test."""
        storage.reload()  # Assuming you have a method to reload storage

if __name__ == "__main__":
    unittest.main()
