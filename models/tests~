import unittest
from datetime import datetime
from models.base_model import BaseModel

class TestBaseModel(unittest.TestCase):
    """Test the BaseModel class."""

    def test_initialization_no_args(self):
        """Test initialization with no arguments."""
        model = BaseModel()
        self.assertIsInstance(model, BaseModel)
        self.assertIsNotNone(model.id)
        self.assertIsInstance(model.created_at, datetime)
        self.assertIsInstance(model.updated_at, datetime)

    def test_initialization_with_kwargs(self):
        """Test initialization with keyword arguments."""
        created_at = datetime.now().isoformat()
        updated_at = datetime.now().isoformat()
        model = BaseModel(id='12345', created_at=created_at, updated_at=updated_at)
        self.assertEqual(model.id, '12345')
        self.assertEqual(model.created_at, datetime.fromisoformat(created_at))
        self.assertEqual(model.updated_at, datetime.fromisoformat(updated_at))

    def test_str_method(self):
        """Test the __str__ method."""
        model = BaseModel()
        expected_str = f"[BaseModel] ({model.id}) {{'id': '{model.id}', 'created_at': {model.created_at.isoformat()}, 'updated_at': {model.updated_at.isoformat()}}}"
        self.assertEqual(str(model), expected_str)

    def test_save_method(self):
        """Test the save method."""
        model = BaseModel()
        original_updated_at = model.updated_at
        model.save()
        self.assertNotEqual(original_updated_at, model.updated_at)

    def test_to_dict_method(self):
        """Test the to_dict method."""
        model = BaseModel()
        dict_repr = model.to_dict()
        self.assertEqual(dict_repr['__class__'], 'BaseModel')
        self.assertEqual(dict_repr['id'], model.id)
        self.assertEqual(dict_repr['created_at'], model.created_at.isoformat())
        self.assertEqual(dict_repr['updated_at'], model.updated_at.isoformat())

if __name__ == '__main__':
    unittest.main()
